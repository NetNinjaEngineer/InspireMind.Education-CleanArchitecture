// <auto-generated />
using System;
using InspireMind.Education.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InspireMind.Education.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed9aafb1-872d-48a9-ade2-1a37b3a39f56"),
                            CourseName = "C# Basics",
                            Duration = 30,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("4976c9f0-c558-41bf-be86-190249fac48d"),
                            CourseName = "Advanced C#",
                            Duration = 40,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("34f1d3b2-5e90-4873-a5c8-f9a3ae175b3b"),
                            CourseName = "JavaScript Essentials",
                            Duration = 25,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("4996138f-fd12-4126-9e29-6bbf7e0330bf"),
                            CourseName = "React Fundamentals",
                            Duration = 35,
                            TopicId = new Guid("b16ea527-9f9c-4c58-8385-a2f69e5c83d9")
                        },
                        new
                        {
                            Id = new Guid("0bca523a-285d-48fd-a805-7950f6bf676f"),
                            CourseName = "TypeScript for Beginners",
                            Duration = 20,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("375a26a9-a1ed-42e2-95e7-e9a30824d192"),
                            CourseName = "Python Programming",
                            Duration = 45,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("102f8148-fcf8-4c1f-b513-21327622b8e1"),
                            CourseName = "Java Programming",
                            Duration = 50,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("5661c5b1-3fc1-4b84-99f5-898c6679fdf2"),
                            CourseName = "SQL Basics",
                            Duration = 30,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("83c47415-c606-4cf5-a13f-d692e7326edd"),
                            CourseName = "NoSQL Databases",
                            Duration = 40,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("99eedb49-b4f1-4c13-a3ce-80059ab6f559"),
                            CourseName = "Data Structures",
                            Duration = 35,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("808ca6a1-258e-4077-a443-af979e010d73"),
                            CourseName = "Algorithms",
                            Duration = 40,
                            TopicId = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563")
                        },
                        new
                        {
                            Id = new Guid("f8475a7e-7778-4ddf-8bf7-6879da2e2e02"),
                            CourseName = "Web Development",
                            Duration = 50,
                            TopicId = new Guid("b16ea527-9f9c-4c58-8385-a2f69e5c83d9")
                        },
                        new
                        {
                            Id = new Guid("e99c06c9-8605-4136-9c40-556bfd9ee2a2"),
                            CourseName = "Mobile App Development",
                            Duration = 45,
                            TopicId = new Guid("b9dd9a87-4852-434e-99dd-3103f7fba183")
                        },
                        new
                        {
                            Id = new Guid("6bae2c61-0dd3-44e4-8c0c-e98add7f3948"),
                            CourseName = "Cloud Computing",
                            Duration = 30,
                            TopicId = new Guid("7db2ed45-a087-4e00-b804-b944f400f450")
                        },
                        new
                        {
                            Id = new Guid("7496625c-9fad-4a07-87c6-98ba31c0064f"),
                            CourseName = "DevOps Practices",
                            Duration = 35,
                            TopicId = new Guid("7db2ed45-a087-4e00-b804-b944f400f450")
                        },
                        new
                        {
                            Id = new Guid("bf1dcec8-b9fe-40f0-b847-2a142fc320f3"),
                            CourseName = "Cybersecurity Basics",
                            Duration = 25,
                            TopicId = new Guid("62841cba-863b-4816-9366-e789646ca43e")
                        },
                        new
                        {
                            Id = new Guid("1e2bac13-26be-4ff0-9716-ea95970a7bb7"),
                            CourseName = "Machine Learning",
                            Duration = 50,
                            TopicId = new Guid("71fd7466-e4d4-41f6-ace8-ed67ea8fafcf")
                        },
                        new
                        {
                            Id = new Guid("aa25d7c5-5f48-40b3-be6e-4bf6eb577f7a"),
                            CourseName = "Artificial Intelligence",
                            Duration = 55,
                            TopicId = new Guid("71fd7466-e4d4-41f6-ace8-ed67ea8fafcf")
                        },
                        new
                        {
                            Id = new Guid("a4207bab-0908-4ff5-878c-0ae69dba6457"),
                            CourseName = "Blockchain Technology",
                            Duration = 40,
                            TopicId = new Guid("df8d86f9-69d9-4eda-9fc4-aa8725c7a47b")
                        },
                        new
                        {
                            Id = new Guid("1ab8063b-dc0f-43a6-9109-ed1b6770c82d"),
                            CourseName = "Internet of Things (IoT)",
                            Duration = 35,
                            TopicId = new Guid("5393a6fe-5c8b-42af-a453-2af2c64f5a35")
                        });
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid?>("InstructorManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateOnly?>("ManageDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorManagerId")
                        .IsUnique()
                        .HasFilter("[InstructorManagerId] IS NOT NULL");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Instructors", (string)null);
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.InstructorCourse", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("InstructorCourses", (string)null);
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.StudentCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses", (string)null);
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Topics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563"),
                            TopicName = "Programming"
                        },
                        new
                        {
                            Id = new Guid("b16ea527-9f9c-4c58-8385-a2f69e5c83d9"),
                            TopicName = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("b9dd9a87-4852-434e-99dd-3103f7fba183"),
                            TopicName = "Mobile App Development"
                        },
                        new
                        {
                            Id = new Guid("7db2ed45-a087-4e00-b804-b944f400f450"),
                            TopicName = "Cloud Computing"
                        },
                        new
                        {
                            Id = new Guid("b8c0db6a-716d-4004-9c89-0e7cf1ba790c"),
                            TopicName = "DevOps Practices"
                        },
                        new
                        {
                            Id = new Guid("62841cba-863b-4816-9366-e789646ca43e"),
                            TopicName = "Cybersecurity"
                        },
                        new
                        {
                            Id = new Guid("096acc69-09a4-4f36-84ff-322e9846ad54"),
                            TopicName = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("71fd7466-e4d4-41f6-ace8-ed67ea8fafcf"),
                            TopicName = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = new Guid("df8d86f9-69d9-4eda-9fc4-aa8725c7a47b"),
                            TopicName = "Blockchain Technology"
                        },
                        new
                        {
                            Id = new Guid("5393a6fe-5c8b-42af-a453-2af2c64f5a35"),
                            TopicName = "Internet of Things (IoT)"
                        });
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Course", b =>
                {
                    b.HasOne("InspireMind.Education.Domain.Entities.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Department", b =>
                {
                    b.HasOne("InspireMind.Education.Domain.Entities.Instructor", "InstructorManager")
                        .WithOne()
                        .HasForeignKey("InspireMind.Education.Domain.Entities.Department", "InstructorManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InstructorManager");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Instructor", b =>
                {
                    b.HasOne("InspireMind.Education.Domain.Entities.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.InstructorCourse", b =>
                {
                    b.HasOne("InspireMind.Education.Domain.Entities.Course", "Course")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InspireMind.Education.Domain.Entities.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Student", b =>
                {
                    b.HasOne("InspireMind.Education.Domain.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.StudentCourse", b =>
                {
                    b.HasOne("InspireMind.Education.Domain.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InspireMind.Education.Domain.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Course", b =>
                {
                    b.Navigation("InstructorCourses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Instructor", b =>
                {
                    b.Navigation("InstructorCourses");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("InspireMind.Education.Domain.Entities.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
