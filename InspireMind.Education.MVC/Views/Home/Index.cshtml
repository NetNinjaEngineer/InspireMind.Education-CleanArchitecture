@using InspireMind.Education.MVC.Helpers
@model CourseDtoPagination
@inject IHttpContextAccessor context

@{
    ViewData["Title"] = "Index";
    var Request = context.HttpContext?.Request;
    var topics = ViewData["Topics"] as IReadOnlyList<TopicDto>;
}

<p id="pagedResultInfo"></p>

<form id="filterForm" class="form-inline mb-3">
    <div class="form-group mr-2">
        <label for="searchTerm">Search</label>
        <input type="text" class="form-control ml-2" id="searchTerm" placeholder="Search by course name or topic name...">
    </div>

    <div class="form-group mr-2">
        <label for="topicId">Topic</label>
        <select name="topicId" class="form-control ml-2" id="topicId">
            <option value="">-- Select Topic --</option>
            @if (topics is not null)
            {
                @foreach (var topic in topics)
                {
                    @if(topic.Id.ToString() == Request!.Query["topicId"])
                    {
                        <option value="@topic.Id" selected>@topic.TopicName</option>
                    }
                    else
                    {
                        <option value="@topic.Id">@topic.TopicName</option>
                    }
                }
            }
        </select>
    </div>

    <div class="form-group mr-2">
        <label for="pageSize">Page Size</label>
        <select name="pageSize" class="form-control ml-2" id="pageSize">
            @foreach (var pageSize in Constants.PageSizes)
            {
                @if (pageSize == Request!.Query["pageSize"])
                {
                    <option value="@pageSize" selected>@pageSize</option>
                }
                else
                {
                    <option value="@pageSize">@pageSize</option>
                }

            }
        </select>
    </div>

    <button id="btnSubmit" type="button" class="btn btn-primary">Apply Filters</button>
</form>

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(c => c.Data.First().Id)</th>
            <th>@Html.DisplayNameFor(c => c.Data.First().CourseName)</th>
            <th>@Html.DisplayNameFor(c => c.Data.First().Duration)</th>
            <th>@Html.DisplayNameFor(c => c.Data.First().TopicId)</th>
            <th>@Html.DisplayNameFor(c => c.Data.First().TopicName)</th>
        </tr>
    </thead>
    <tbody id="courseTableBody">
        @foreach (var item in Model.Data)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.CourseName</td>
                <td>@item.Duration</td>
                <td>@item.Id</td>
                <td>@item.TopicName</td>
            </tr>
        }
    </tbody>
</table>

<hr />
<nav aria-label="...">
    <ul class="pagination" id="pagination">
    </ul>
</nav>

@section Scripts {
    <script>

        document.getElementById("searchTerm").oninput = (event) => {
            const searchValue = event.target.value;
            $.ajax({
                url: `https://localhost:7218/api/Courses/CoursesWithTopics`,
                type: 'GET',
                data: {
                    searchTerm: searchValue != null ? searchValue : ""
                },
                success: function (response) {
                    const tableBody = document.getElementById('courseTableBody');
                    tableBody.innerHTML = '';

                    response.data.forEach(course => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                                    <td>${course.id}</td>
                                    <td>${course.courseName}</td>
                                    <td>${course.duration}</td>
                                    <td>${course.topicId}</td>
                                    <td>${course.topicName}</td>
                                `;
                        tableBody.appendChild(row)
                    });

                    updatePagination(response.metaData);
                },
                error: function () {
                    console.log('Error retrieving data. Please try again.');
                }
            });
        };

        document.getElementById('btnSubmit').addEventListener("click", () => {
            var topicId = $('#topicId').val();
            var pageSize = $('#pageSize').val();

            $.ajax({
                url: `https://localhost:7218/api/Courses/CoursesWithTopics`,
                type: 'GET',
                data: {
                    topicId: topicId,
                    pageSize: pageSize,
                    pageNumber: 1
                },
                success: function (response) {
                    const tableBody = document.getElementById('courseTableBody');
                    tableBody.innerHTML = '';

                    response.data.forEach(course => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                                    <td>${course.id}</td>
                                    <td>${course.courseName}</td>
                                    <td>${course.duration}</td>
                                    <td>${course.topicId}</td>
                                    <td>${course.topicName}</td>
                                `;
                        tableBody.appendChild(row);
                    });

                    updatePagination(response.metaData);
                },
                error: function () {
                    alert('Error retrieving data. Please try again.');
                }
            });
        });

        function loadPage(pageNumber) {
            var topicId = $('#topicId').val();
            var pageSize = $('#pageSize').val();

            $.ajax({
                url: `https://localhost:7218/api/Courses/CoursesWithTopics`,
                type: 'GET',
                data: {
                    topicId: topicId,
                    pageSize: pageSize,
                    pageNumber: pageNumber
                },
                beforeSend: function () {
                    // Disable pagination links while loading
                    $('.pagination .page-link').addClass('disabled');
                },
                success: function (response) {
                    const tableBody = document.getElementById('courseTableBody');
                    tableBody.innerHTML = '';

                    response.data.forEach(course => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                                    <td>${course.id}</td>
                                    <td>${course.courseName}</td>
                                    <td>${course.duration}</td>
                                    <td>${course.topicId}</td>
                                    <td>${course.topicName}</td>
                                `;
                        tableBody.appendChild(row);
                    });

                    updatePagination(response.metaData);

                    // Re-enable pagination links after loading
                    $('.pagination .page-link').removeClass('disabled');
                },
                error: function () {
                    alert('Error retrieving data. Please try again.');
                }
            });
        }

        function updatePagination(metaData) {
            console.log(metaData);
            const pagedResultInfo = document.getElementById('pagedResultInfo');
            pagedResultInfo.innerHTML = '';
            pagedResultInfo.textContent = `${metaData.currentPage}-${metaData.totalPages} of ${metaData.totalCount}`;
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // Previous Button
            if (metaData.hasPrevious) {
                const prevItem = document.createElement('li');
                prevItem.classList.add('page-item');
                const prevLink = document.createElement('a');
                prevLink.classList.add('page-link');
                prevLink.setAttribute("href", "#");
                prevLink.textContent = 'Previous';
                prevLink.addEventListener('click', () => loadPage(metaData.currentPage - 1));
                prevItem.appendChild(prevLink);
                pagination.appendChild(prevItem);
            }

            // Page Numbers
            for (let i = 1; i <= metaData.totalPages; i++) {
                const pageItem = document.createElement('li');
                pageItem.classList.add('page-item');
                if (i === metaData.currentPage) {
                    pageItem.classList.add('active');
                }
                const pageLink = document.createElement('a');
                pageLink.classList.add('page-link');
                pageLink.setAttribute("href", "#");
                pageLink.textContent = i;
                pageLink.addEventListener('click', () => loadPage(i));
                pageItem.appendChild(pageLink);
                pagination.appendChild(pageItem);
            }

            // Next Button
            if (metaData.hasNext) {
                const nextItem = document.createElement('li');
                nextItem.classList.add('page-item');
                const nextLink = document.createElement('a');
                nextLink.classList.add('page-link');
                nextLink.setAttribute("href", "#");
                nextLink.textContent = 'Next';
                nextLink.addEventListener('click', () => loadPage(metaData.currentPage + 1));
                nextItem.appendChild(nextLink);
                pagination.appendChild(nextItem);
            }

            // Add cursor pointer when hovering over pagination links
            const linkItems = document.querySelectorAll('.pagination li');
            linkItems.forEach(item => {
                item.style.cursor = 'pointer';
            });
        }

    </script>
}